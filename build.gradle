plugins {
    id("java")
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

// Versioning
val pluginVersion = "2.0.0"
val gitHash = System.getenv("GITHUB_SHA") ?: "local"
version = "$pluginVersion-${gitHash.take(7)}"

group = "fr.openmc"

repositories {
    mavenCentral()
    maven("https://repo.papermc.io/repository/maven-public/")
    maven("https://oss.sonatype.org/content/groups/public/")
    maven("https://mvn.mathiasd.fr/releases")
    maven("https://maven.enginehub.org/repo/")
    maven("https://repo.extendedclip.com/content/repositories/placeholderapi/")
    maven("https://repo.dmulloy2.net/repository/public/")
    maven("https://jitpack.io") // Toujours Ã  la fin
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly("com.github.LoneDev6:API-ItemsAdder:3.6.3-beta-14")
    compileOnly("net.luckperms:api:5.4")
    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("com.sk89q.worldguard:worldguard-bukkit:7.0.9")
    compileOnly("com.github.dmulloy2:ProtocolLib:-SNAPSHOT")

    implementation("de.rapha149.signgui:signgui:2.5.0")
    implementation("dev.xernas:menulib:1.1.0")
    implementation("org.jetbrains:annotations:24.1.0")
    implementation("com.github.Revxrsal.Lamp:common:3.2.1")
    implementation("com.github.Revxrsal.Lamp:bukkit:3.2.1")
    implementation("net.raidstone:wgevents:1.18.1")

    compileOnly("org.projectlombok:lombok:1.18.34")
    annotationProcessor("org.projectlombok:lombok:1.18.34")
    testCompileOnly("org.projectlombok:lombok:1.18.34")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.34")

    testImplementation("org.slf4j:slf4j-simple:2.0.16")
    testImplementation("org.junit.jupiter:junit-jupiter:5.11.0")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation("org.mockbukkit.mockbukkit:mockbukkit-v1.21:4.45.0")
    testImplementation("com.h2database:h2:2.3.232")
}

val targetJavaVersion = 21
java {
    val javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    val props = mapOf("version" to version)
    inputs.properties(props)
    filteringCharset = "UTF-8"
    filesMatching("paper-plugin.yml") {
        expand(props)
    }
}

tasks.jar {
    manifest {
        attributes["GIT-COMMIT"] = gitHash
    }
    destinationDirectory.set(file("./builds/"))
}

tasks.clean {
    delete("builds")
}

tasks.shadowJar {
    destinationDirectory.set(file("./builds/"))
    archiveFileName.set("OpenMC.jar")
}

tasks.test {
    useJUnitPlatform()
}

test { useJUnitPlatform() }

apply plugin: "com.github.johnrengelman.shadow"
